"""autogenerated by genpy from owd_msgs/MassProperties.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MassProperties(genpy.Message):
  _md5sum = "6902a26aa992b6613972882349b094c7"
  _type = "owd_msgs/MassProperties"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 link
float64 mass
float64 cog_x
float64 cog_y
float64 cog_z
float64 inertia_xx
float64 inertia_xy
float64 inertia_xz
float64 inertia_yy
float64 inertia_yz
float64 inertia_zz

"""
  __slots__ = ['link','mass','cog_x','cog_y','cog_z','inertia_xx','inertia_xy','inertia_xz','inertia_yy','inertia_yz','inertia_zz']
  _slot_types = ['uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       link,mass,cog_x,cog_y,cog_z,inertia_xx,inertia_xy,inertia_xz,inertia_yy,inertia_yz,inertia_zz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MassProperties, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.link is None:
        self.link = 0
      if self.mass is None:
        self.mass = 0.
      if self.cog_x is None:
        self.cog_x = 0.
      if self.cog_y is None:
        self.cog_y = 0.
      if self.cog_z is None:
        self.cog_z = 0.
      if self.inertia_xx is None:
        self.inertia_xx = 0.
      if self.inertia_xy is None:
        self.inertia_xy = 0.
      if self.inertia_xz is None:
        self.inertia_xz = 0.
      if self.inertia_yy is None:
        self.inertia_yy = 0.
      if self.inertia_yz is None:
        self.inertia_yz = 0.
      if self.inertia_zz is None:
        self.inertia_zz = 0.
    else:
      self.link = 0
      self.mass = 0.
      self.cog_x = 0.
      self.cog_y = 0.
      self.cog_z = 0.
      self.inertia_xx = 0.
      self.inertia_xy = 0.
      self.inertia_xz = 0.
      self.inertia_yy = 0.
      self.inertia_yz = 0.
      self.inertia_zz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B10d.pack(_x.link, _x.mass, _x.cog_x, _x.cog_y, _x.cog_z, _x.inertia_xx, _x.inertia_xy, _x.inertia_xz, _x.inertia_yy, _x.inertia_yz, _x.inertia_zz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 81
      (_x.link, _x.mass, _x.cog_x, _x.cog_y, _x.cog_z, _x.inertia_xx, _x.inertia_xy, _x.inertia_xz, _x.inertia_yy, _x.inertia_yz, _x.inertia_zz,) = _struct_B10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B10d.pack(_x.link, _x.mass, _x.cog_x, _x.cog_y, _x.cog_z, _x.inertia_xx, _x.inertia_xy, _x.inertia_xz, _x.inertia_yy, _x.inertia_yz, _x.inertia_zz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 81
      (_x.link, _x.mass, _x.cog_x, _x.cog_y, _x.cog_z, _x.inertia_xx, _x.inertia_xy, _x.inertia_xz, _x.inertia_yy, _x.inertia_yz, _x.inertia_zz,) = _struct_B10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B10d = struct.Struct("<B10d")
