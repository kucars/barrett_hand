"""autogenerated by genpy from owd_msgs/Jacobian.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Jacobian(genpy.Message):
  _md5sum = "2e7c7c8dcc9c518bf10c78aabf65ff92"
  _type = "owd_msgs/Jacobian"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# float32[] jacobianEE_row1
# float32[] jacobianEE_row2
# float32[] jacobianEE_row3
float32[] jacobian0_row1
float32[] jacobian0_row2
float32[] jacobian0_row3
float32[] jacobian0_row4
float32[] jacobian0_row5
float32[] jacobian0_row6
float32[] endpoint_row1
float32[] endpoint_row2
float32[] endpoint_row3

"""
  __slots__ = ['jacobian0_row1','jacobian0_row2','jacobian0_row3','jacobian0_row4','jacobian0_row5','jacobian0_row6','endpoint_row1','endpoint_row2','endpoint_row3']
  _slot_types = ['float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       jacobian0_row1,jacobian0_row2,jacobian0_row3,jacobian0_row4,jacobian0_row5,jacobian0_row6,endpoint_row1,endpoint_row2,endpoint_row3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Jacobian, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.jacobian0_row1 is None:
        self.jacobian0_row1 = []
      if self.jacobian0_row2 is None:
        self.jacobian0_row2 = []
      if self.jacobian0_row3 is None:
        self.jacobian0_row3 = []
      if self.jacobian0_row4 is None:
        self.jacobian0_row4 = []
      if self.jacobian0_row5 is None:
        self.jacobian0_row5 = []
      if self.jacobian0_row6 is None:
        self.jacobian0_row6 = []
      if self.endpoint_row1 is None:
        self.endpoint_row1 = []
      if self.endpoint_row2 is None:
        self.endpoint_row2 = []
      if self.endpoint_row3 is None:
        self.endpoint_row3 = []
    else:
      self.jacobian0_row1 = []
      self.jacobian0_row2 = []
      self.jacobian0_row3 = []
      self.jacobian0_row4 = []
      self.jacobian0_row5 = []
      self.jacobian0_row6 = []
      self.endpoint_row1 = []
      self.endpoint_row2 = []
      self.endpoint_row3 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.jacobian0_row1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.jacobian0_row1))
      length = len(self.jacobian0_row2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.jacobian0_row2))
      length = len(self.jacobian0_row3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.jacobian0_row3))
      length = len(self.jacobian0_row4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.jacobian0_row4))
      length = len(self.jacobian0_row5)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.jacobian0_row5))
      length = len(self.jacobian0_row6)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.jacobian0_row6))
      length = len(self.endpoint_row1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.endpoint_row1))
      length = len(self.endpoint_row2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.endpoint_row2))
      length = len(self.endpoint_row3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.endpoint_row3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row3 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row4 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row5 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row6 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.endpoint_row1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.endpoint_row2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.endpoint_row3 = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.jacobian0_row1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jacobian0_row1.tostring())
      length = len(self.jacobian0_row2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jacobian0_row2.tostring())
      length = len(self.jacobian0_row3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jacobian0_row3.tostring())
      length = len(self.jacobian0_row4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jacobian0_row4.tostring())
      length = len(self.jacobian0_row5)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jacobian0_row5.tostring())
      length = len(self.jacobian0_row6)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.jacobian0_row6.tostring())
      length = len(self.endpoint_row1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.endpoint_row1.tostring())
      length = len(self.endpoint_row2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.endpoint_row2.tostring())
      length = len(self.endpoint_row3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.endpoint_row3.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row4 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row5 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.jacobian0_row6 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.endpoint_row1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.endpoint_row2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.endpoint_row3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
