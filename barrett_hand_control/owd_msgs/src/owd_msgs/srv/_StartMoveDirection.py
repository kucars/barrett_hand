"""autogenerated by genpy from owd_msgs/StartMoveDirectionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StartMoveDirectionRequest(genpy.Message):
  _md5sum = "ff8356aeaeea957f0171c4a52e0adabe"
  _type = "owd_msgs/StartMoveDirectionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 direction_x
float32 direction_y
float32 direction_z
float32 distance
float32 velocity
bool compliance

"""
  __slots__ = ['direction_x','direction_y','direction_z','distance','velocity','compliance']
  _slot_types = ['float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       direction_x,direction_y,direction_z,distance,velocity,compliance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StartMoveDirectionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.direction_x is None:
        self.direction_x = 0.
      if self.direction_y is None:
        self.direction_y = 0.
      if self.direction_z is None:
        self.direction_z = 0.
      if self.distance is None:
        self.distance = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.compliance is None:
        self.compliance = False
    else:
      self.direction_x = 0.
      self.direction_y = 0.
      self.direction_z = 0.
      self.distance = 0.
      self.velocity = 0.
      self.compliance = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5fB.pack(_x.direction_x, _x.direction_y, _x.direction_z, _x.distance, _x.velocity, _x.compliance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.direction_x, _x.direction_y, _x.direction_z, _x.distance, _x.velocity, _x.compliance,) = _struct_5fB.unpack(str[start:end])
      self.compliance = bool(self.compliance)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5fB.pack(_x.direction_x, _x.direction_y, _x.direction_z, _x.distance, _x.velocity, _x.compliance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.direction_x, _x.direction_y, _x.direction_z, _x.distance, _x.velocity, _x.compliance,) = _struct_5fB.unpack(str[start:end])
      self.compliance = bool(self.compliance)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5fB = struct.Struct("<5fB")
"""autogenerated by genpy from owd_msgs/StartMoveDirectionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StartMoveDirectionResponse(genpy.Message):
  _md5sum = "ad2e2c70d0557970f2c1628f5539a6dd"
  _type = "owd_msgs/StartMoveDirectionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool ok
string reason
uint32 id



"""
  __slots__ = ['ok','reason','id']
  _slot_types = ['bool','string','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ok,reason,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StartMoveDirectionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ok is None:
        self.ok = False
      if self.reason is None:
        self.reason = ''
      if self.id is None:
        self.id = 0
    else:
      self.ok = False
      self.reason = ''
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.ok))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _struct_B.unpack(str[start:end])
      self.ok = bool(self.ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8')
      else:
        self.reason = str[start:end]
      start = end
      end += 4
      (self.id,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.ok))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _struct_B.unpack(str[start:end])
      self.ok = bool(self.ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8')
      else:
        self.reason = str[start:end]
      start = end
      end += 4
      (self.id,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class StartMoveDirection(object):
  _type          = 'owd_msgs/StartMoveDirection'
  _md5sum = '592d0394dec93f8d4a007e711a4711de'
  _request_class  = StartMoveDirectionRequest
  _response_class = StartMoveDirectionResponse
