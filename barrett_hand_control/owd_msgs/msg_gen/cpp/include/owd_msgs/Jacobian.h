/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/msg/Jacobian.msg */
#ifndef OWD_MSGS_MESSAGE_JACOBIAN_H
#define OWD_MSGS_MESSAGE_JACOBIAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace owd_msgs
{
template <class ContainerAllocator>
struct Jacobian_ {
  typedef Jacobian_<ContainerAllocator> Type;

  Jacobian_()
  : jacobian0_row1()
  , jacobian0_row2()
  , jacobian0_row3()
  , jacobian0_row4()
  , jacobian0_row5()
  , jacobian0_row6()
  , endpoint_row1()
  , endpoint_row2()
  , endpoint_row3()
  {
  }

  Jacobian_(const ContainerAllocator& _alloc)
  : jacobian0_row1(_alloc)
  , jacobian0_row2(_alloc)
  , jacobian0_row3(_alloc)
  , jacobian0_row4(_alloc)
  , jacobian0_row5(_alloc)
  , jacobian0_row6(_alloc)
  , endpoint_row1(_alloc)
  , endpoint_row2(_alloc)
  , endpoint_row3(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _jacobian0_row1_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  jacobian0_row1;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _jacobian0_row2_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  jacobian0_row2;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _jacobian0_row3_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  jacobian0_row3;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _jacobian0_row4_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  jacobian0_row4;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _jacobian0_row5_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  jacobian0_row5;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _jacobian0_row6_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  jacobian0_row6;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _endpoint_row1_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  endpoint_row1;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _endpoint_row2_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  endpoint_row2;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _endpoint_row3_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  endpoint_row3;


  typedef boost::shared_ptr< ::owd_msgs::Jacobian_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::Jacobian_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Jacobian
typedef  ::owd_msgs::Jacobian_<std::allocator<void> > Jacobian;

typedef boost::shared_ptr< ::owd_msgs::Jacobian> JacobianPtr;
typedef boost::shared_ptr< ::owd_msgs::Jacobian const> JacobianConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::owd_msgs::Jacobian_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::owd_msgs::Jacobian_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::Jacobian_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::Jacobian_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::Jacobian_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e7c7c8dcc9c518bf10c78aabf65ff92";
  }

  static const char* value(const  ::owd_msgs::Jacobian_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2e7c7c8dcc9c518bULL;
  static const uint64_t static_value2 = 0xf10c78aabf65ff92ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::Jacobian_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/Jacobian";
  }

  static const char* value(const  ::owd_msgs::Jacobian_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::Jacobian_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# float32[] jacobianEE_row1\n\
# float32[] jacobianEE_row2\n\
# float32[] jacobianEE_row3\n\
float32[] jacobian0_row1\n\
float32[] jacobian0_row2\n\
float32[] jacobian0_row3\n\
float32[] jacobian0_row4\n\
float32[] jacobian0_row5\n\
float32[] jacobian0_row6\n\
float32[] endpoint_row1\n\
float32[] endpoint_row2\n\
float32[] endpoint_row3\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::Jacobian_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::Jacobian_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.jacobian0_row1);
    stream.next(m.jacobian0_row2);
    stream.next(m.jacobian0_row3);
    stream.next(m.jacobian0_row4);
    stream.next(m.jacobian0_row5);
    stream.next(m.jacobian0_row6);
    stream.next(m.endpoint_row1);
    stream.next(m.endpoint_row2);
    stream.next(m.endpoint_row3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Jacobian_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owd_msgs::Jacobian_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::owd_msgs::Jacobian_<ContainerAllocator> & v) 
  {
    s << indent << "jacobian0_row1[]" << std::endl;
    for (size_t i = 0; i < v.jacobian0_row1.size(); ++i)
    {
      s << indent << "  jacobian0_row1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jacobian0_row1[i]);
    }
    s << indent << "jacobian0_row2[]" << std::endl;
    for (size_t i = 0; i < v.jacobian0_row2.size(); ++i)
    {
      s << indent << "  jacobian0_row2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jacobian0_row2[i]);
    }
    s << indent << "jacobian0_row3[]" << std::endl;
    for (size_t i = 0; i < v.jacobian0_row3.size(); ++i)
    {
      s << indent << "  jacobian0_row3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jacobian0_row3[i]);
    }
    s << indent << "jacobian0_row4[]" << std::endl;
    for (size_t i = 0; i < v.jacobian0_row4.size(); ++i)
    {
      s << indent << "  jacobian0_row4[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jacobian0_row4[i]);
    }
    s << indent << "jacobian0_row5[]" << std::endl;
    for (size_t i = 0; i < v.jacobian0_row5.size(); ++i)
    {
      s << indent << "  jacobian0_row5[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jacobian0_row5[i]);
    }
    s << indent << "jacobian0_row6[]" << std::endl;
    for (size_t i = 0; i < v.jacobian0_row6.size(); ++i)
    {
      s << indent << "  jacobian0_row6[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jacobian0_row6[i]);
    }
    s << indent << "endpoint_row1[]" << std::endl;
    for (size_t i = 0; i < v.endpoint_row1.size(); ++i)
    {
      s << indent << "  endpoint_row1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.endpoint_row1[i]);
    }
    s << indent << "endpoint_row2[]" << std::endl;
    for (size_t i = 0; i < v.endpoint_row2.size(); ++i)
    {
      s << indent << "  endpoint_row2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.endpoint_row2[i]);
    }
    s << indent << "endpoint_row3[]" << std::endl;
    for (size_t i = 0; i < v.endpoint_row3.size(); ++i)
    {
      s << indent << "  endpoint_row3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.endpoint_row3[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OWD_MSGS_MESSAGE_JACOBIAN_H

