/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/msg/WAMInternals.msg */
#ifndef OWD_MSGS_MESSAGE_WAMINTERNALS_H
#define OWD_MSGS_MESSAGE_WAMINTERNALS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "owd_msgs/PIDgains.h"

namespace owd_msgs
{
template <class ContainerAllocator>
struct WAMInternals_ {
  typedef WAMInternals_<ContainerAllocator> Type;

  WAMInternals_()
  : positions()
  , total_torque()
  , dynamic_torque()
  , trajectory_torque()
  , sim_torque()
  , joint_offsets()
  , gains()
  , elbow_velocity(0.0)
  , endpoint_velocity(0.0)
  , barrett_endpoint_velocity(0.0)
  {
  }

  WAMInternals_(const ContainerAllocator& _alloc)
  : positions(_alloc)
  , total_torque(_alloc)
  , dynamic_torque(_alloc)
  , trajectory_torque(_alloc)
  , sim_torque(_alloc)
  , joint_offsets(_alloc)
  , gains(_alloc)
  , elbow_velocity(0.0)
  , endpoint_velocity(0.0)
  , barrett_endpoint_velocity(0.0)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  positions;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _total_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  total_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dynamic_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  dynamic_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _trajectory_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  trajectory_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _sim_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  sim_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_offsets_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  joint_offsets;

  typedef std::vector< ::owd_msgs::PIDgains_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::owd_msgs::PIDgains_<ContainerAllocator> >::other >  _gains_type;
  std::vector< ::owd_msgs::PIDgains_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::owd_msgs::PIDgains_<ContainerAllocator> >::other >  gains;

  typedef double _elbow_velocity_type;
  double elbow_velocity;

  typedef double _endpoint_velocity_type;
  double endpoint_velocity;

  typedef double _barrett_endpoint_velocity_type;
  double barrett_endpoint_velocity;


  typedef boost::shared_ptr< ::owd_msgs::WAMInternals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::WAMInternals_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WAMInternals
typedef  ::owd_msgs::WAMInternals_<std::allocator<void> > WAMInternals;

typedef boost::shared_ptr< ::owd_msgs::WAMInternals> WAMInternalsPtr;
typedef boost::shared_ptr< ::owd_msgs::WAMInternals const> WAMInternalsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::owd_msgs::WAMInternals_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::owd_msgs::WAMInternals_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::WAMInternals_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::WAMInternals_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::WAMInternals_<ContainerAllocator> > {
  static const char* value() 
  {
    return "67c5b62b42db530685a95dacfc526dab";
  }

  static const char* value(const  ::owd_msgs::WAMInternals_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x67c5b62b42db5306ULL;
  static const uint64_t static_value2 = 0x85a95dacfc526dabULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::WAMInternals_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/WAMInternals";
  }

  static const char* value(const  ::owd_msgs::WAMInternals_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::WAMInternals_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] positions\n\
float64[] total_torque\n\
float64[] dynamic_torque\n\
float64[] trajectory_torque\n\
float64[] sim_torque\n\
float64[] joint_offsets\n\
PIDgains[] gains\n\
float64 elbow_velocity\n\
float64 endpoint_velocity\n\
float64 barrett_endpoint_velocity\n\
\n\
================================================================================\n\
MSG: owd_msgs/PIDgains\n\
float64 kp\n\
float64 kd\n\
float64 ki\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::WAMInternals_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::WAMInternals_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.positions);
    stream.next(m.total_torque);
    stream.next(m.dynamic_torque);
    stream.next(m.trajectory_torque);
    stream.next(m.sim_torque);
    stream.next(m.joint_offsets);
    stream.next(m.gains);
    stream.next(m.elbow_velocity);
    stream.next(m.endpoint_velocity);
    stream.next(m.barrett_endpoint_velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WAMInternals_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owd_msgs::WAMInternals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::owd_msgs::WAMInternals_<ContainerAllocator> & v) 
  {
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "total_torque[]" << std::endl;
    for (size_t i = 0; i < v.total_torque.size(); ++i)
    {
      s << indent << "  total_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.total_torque[i]);
    }
    s << indent << "dynamic_torque[]" << std::endl;
    for (size_t i = 0; i < v.dynamic_torque.size(); ++i)
    {
      s << indent << "  dynamic_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dynamic_torque[i]);
    }
    s << indent << "trajectory_torque[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_torque.size(); ++i)
    {
      s << indent << "  trajectory_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.trajectory_torque[i]);
    }
    s << indent << "sim_torque[]" << std::endl;
    for (size_t i = 0; i < v.sim_torque.size(); ++i)
    {
      s << indent << "  sim_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sim_torque[i]);
    }
    s << indent << "joint_offsets[]" << std::endl;
    for (size_t i = 0; i < v.joint_offsets.size(); ++i)
    {
      s << indent << "  joint_offsets[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_offsets[i]);
    }
    s << indent << "gains[]" << std::endl;
    for (size_t i = 0; i < v.gains.size(); ++i)
    {
      s << indent << "  gains[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::owd_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "    ", v.gains[i]);
    }
    s << indent << "elbow_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.elbow_velocity);
    s << indent << "endpoint_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.endpoint_velocity);
    s << indent << "barrett_endpoint_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.barrett_endpoint_velocity);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OWD_MSGS_MESSAGE_WAMINTERNALS_H

