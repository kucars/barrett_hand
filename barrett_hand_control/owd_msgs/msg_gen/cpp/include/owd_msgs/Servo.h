/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/msg/Servo.msg */
#ifndef OWD_MSGS_MESSAGE_SERVO_H
#define OWD_MSGS_MESSAGE_SERVO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace owd_msgs
{
template <class ContainerAllocator>
struct Servo_ {
  typedef Servo_<ContainerAllocator> Type;

  Servo_()
  : joint()
  , velocity()
  {
  }

  Servo_(const ContainerAllocator& _alloc)
  : joint(_alloc)
  , velocity(_alloc)
  {
  }

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _joint_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  joint;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _velocity_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  velocity;


  typedef boost::shared_ptr< ::owd_msgs::Servo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::Servo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Servo
typedef  ::owd_msgs::Servo_<std::allocator<void> > Servo;

typedef boost::shared_ptr< ::owd_msgs::Servo> ServoPtr;
typedef boost::shared_ptr< ::owd_msgs::Servo const> ServoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::owd_msgs::Servo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::owd_msgs::Servo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::Servo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::Servo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::Servo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86bc1137fbe8eaaaaa9dbbe92ec4bad5";
  }

  static const char* value(const  ::owd_msgs::Servo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x86bc1137fbe8eaaaULL;
  static const uint64_t static_value2 = 0xaa9dbbe92ec4bad5ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::Servo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/Servo";
  }

  static const char* value(const  ::owd_msgs::Servo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::Servo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32[] joint\n\
float32[] velocity\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::Servo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::Servo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint);
    stream.next(m.velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Servo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owd_msgs::Servo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::owd_msgs::Servo_<ContainerAllocator> & v) 
  {
    s << indent << "joint[]" << std::endl;
    for (size_t i = 0; i < v.joint.size(); ++i)
    {
      s << indent << "  joint[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.joint[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OWD_MSGS_MESSAGE_SERVO_H

