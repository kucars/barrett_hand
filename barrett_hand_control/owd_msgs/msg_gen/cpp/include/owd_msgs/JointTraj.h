/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/msg/JointTraj.msg */
#ifndef OWD_MSGS_MESSAGE_JOINTTRAJ_H
#define OWD_MSGS_MESSAGE_JOINTTRAJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "owd_msgs/Joints.h"

namespace owd_msgs
{
template <class ContainerAllocator>
struct JointTraj_ {
  typedef JointTraj_<ContainerAllocator> Type;

  JointTraj_()
  : positions()
  , blend_radius()
  , options(0)
  , id()
  {
  }

  JointTraj_(const ContainerAllocator& _alloc)
  : positions(_alloc)
  , blend_radius(_alloc)
  , options(0)
  , id(_alloc)
  {
  }

  typedef std::vector< ::owd_msgs::Joints_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::owd_msgs::Joints_<ContainerAllocator> >::other >  _positions_type;
  std::vector< ::owd_msgs::Joints_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::owd_msgs::Joints_<ContainerAllocator> >::other >  positions;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _blend_radius_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  blend_radius;

  typedef uint32_t _options_type;
  uint32_t options;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  enum { opt_WaitForStart = 1 };
  enum { opt_CancelOnStall = 2 };
  enum { opt_CancelOnForceInput = 4 };
  enum { opt_CancelOnTactileInput = 8 };
  enum { opt_Synchronize = 16 };

  typedef boost::shared_ptr< ::owd_msgs::JointTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::JointTraj_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointTraj
typedef  ::owd_msgs::JointTraj_<std::allocator<void> > JointTraj;

typedef boost::shared_ptr< ::owd_msgs::JointTraj> JointTrajPtr;
typedef boost::shared_ptr< ::owd_msgs::JointTraj const> JointTrajConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::owd_msgs::JointTraj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::owd_msgs::JointTraj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::JointTraj_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::JointTraj_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::JointTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c624daf7add91fa456a8f89affd11db1";
  }

  static const char* value(const  ::owd_msgs::JointTraj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc624daf7add91fa4ULL;
  static const uint64_t static_value2 = 0x56a8f89affd11db1ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::JointTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/JointTraj";
  }

  static const char* value(const  ::owd_msgs::JointTraj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::JointTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/Joints[] positions\n\
float32[] blend_radius\n\
uint32 options\n\
string id\n\
\n\
# options should be powers of 2, so that they can be OR'd together\n\
uint32 opt_WaitForStart=1\n\
uint32 opt_CancelOnStall=2\n\
uint32 opt_CancelOnForceInput=4\n\
uint32 opt_CancelOnTactileInput=8\n\
uint32 opt_Synchronize=16\n\
#uint32 opt_          =32  # placeholder for next value\n\
\n\
================================================================================\n\
MSG: owd_msgs/Joints\n\
float64[] j\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::JointTraj_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::JointTraj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.positions);
    stream.next(m.blend_radius);
    stream.next(m.options);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointTraj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owd_msgs::JointTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::owd_msgs::JointTraj_<ContainerAllocator> & v) 
  {
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::owd_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "    ", v.positions[i]);
    }
    s << indent << "blend_radius[]" << std::endl;
    for (size_t i = 0; i < v.blend_radius.size(); ++i)
    {
      s << indent << "  blend_radius[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.blend_radius[i]);
    }
    s << indent << "options: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.options);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OWD_MSGS_MESSAGE_JOINTTRAJ_H

