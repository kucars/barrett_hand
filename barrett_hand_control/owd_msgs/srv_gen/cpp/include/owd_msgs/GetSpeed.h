/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/GetSpeed.srv */
#ifndef OWD_MSGS_SERVICE_GETSPEED_H
#define OWD_MSGS_SERVICE_GETSPEED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace owd_msgs
{
template <class ContainerAllocator>
struct GetSpeedRequest_ {
  typedef GetSpeedRequest_<ContainerAllocator> Type;

  GetSpeedRequest_()
  {
  }

  GetSpeedRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::owd_msgs::GetSpeedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::GetSpeedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSpeedRequest
typedef  ::owd_msgs::GetSpeedRequest_<std::allocator<void> > GetSpeedRequest;

typedef boost::shared_ptr< ::owd_msgs::GetSpeedRequest> GetSpeedRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::GetSpeedRequest const> GetSpeedRequestConstPtr;



template <class ContainerAllocator>
struct GetSpeedResponse_ {
  typedef GetSpeedResponse_<ContainerAllocator> Type;

  GetSpeedResponse_()
  : max_velocity()
  , max_acceleration()
  , max_jerk(0.0)
  {
  }

  GetSpeedResponse_(const ContainerAllocator& _alloc)
  : max_velocity(_alloc)
  , max_acceleration(_alloc)
  , max_jerk(0.0)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _max_velocity_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  max_velocity;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _max_acceleration_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  max_acceleration;

  typedef double _max_jerk_type;
  double max_jerk;


  typedef boost::shared_ptr< ::owd_msgs::GetSpeedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::GetSpeedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSpeedResponse
typedef  ::owd_msgs::GetSpeedResponse_<std::allocator<void> > GetSpeedResponse;

typedef boost::shared_ptr< ::owd_msgs::GetSpeedResponse> GetSpeedResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::GetSpeedResponse const> GetSpeedResponseConstPtr;


struct GetSpeed
{

typedef GetSpeedRequest Request;
typedef GetSpeedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetSpeed
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::GetSpeedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::GetSpeedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::owd_msgs::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/GetSpeedRequest";
  }

  static const char* value(const  ::owd_msgs::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::owd_msgs::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::owd_msgs::GetSpeedRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::GetSpeedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::GetSpeedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "804e50610c7476a6ce4d10a645d1448f";
  }

  static const char* value(const  ::owd_msgs::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x804e50610c7476a6ULL;
  static const uint64_t static_value2 = 0xce4d10a645d1448fULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/GetSpeedResponse";
  }

  static const char* value(const  ::owd_msgs::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] max_velocity\n\
float64[] max_acceleration\n\
float64 max_jerk\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::GetSpeedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSpeedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::GetSpeedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.max_velocity);
    stream.next(m.max_acceleration);
    stream.next(m.max_jerk);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSpeedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::GetSpeed> {
  static const char* value() 
  {
    return "804e50610c7476a6ce4d10a645d1448f";
  }

  static const char* value(const owd_msgs::GetSpeed&) { return value(); } 
};

template<>
struct DataType<owd_msgs::GetSpeed> {
  static const char* value() 
  {
    return "owd_msgs/GetSpeed";
  }

  static const char* value(const owd_msgs::GetSpeed&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "804e50610c7476a6ce4d10a645d1448f";
  }

  static const char* value(const owd_msgs::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/GetSpeed";
  }

  static const char* value(const owd_msgs::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "804e50610c7476a6ce4d10a645d1448f";
  }

  static const char* value(const owd_msgs::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/GetSpeed";
  }

  static const char* value(const owd_msgs::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_GETSPEED_H

