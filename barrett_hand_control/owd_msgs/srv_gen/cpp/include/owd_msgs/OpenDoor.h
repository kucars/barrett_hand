/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/OpenDoor.srv */
#ifndef OWD_MSGS_SERVICE_OPENDOOR_H
#define OWD_MSGS_SERVICE_OPENDOOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "owd_msgs/JointTraj.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Vector3.h"



namespace owd_msgs
{
template <class ContainerAllocator>
struct OpenDoorRequest_ {
  typedef OpenDoorRequest_<ContainerAllocator> Type;

  OpenDoorRequest_()
  : traj()
  , ee_pose()
  , pull_direction()
  {
  }

  OpenDoorRequest_(const ContainerAllocator& _alloc)
  : traj(_alloc)
  , ee_pose(_alloc)
  , pull_direction(_alloc)
  {
  }

  typedef  ::owd_msgs::JointTraj_<ContainerAllocator>  _traj_type;
   ::owd_msgs::JointTraj_<ContainerAllocator>  traj;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _ee_pose_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  ee_pose;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pull_direction_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  pull_direction;


  typedef boost::shared_ptr< ::owd_msgs::OpenDoorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::OpenDoorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct OpenDoorRequest
typedef  ::owd_msgs::OpenDoorRequest_<std::allocator<void> > OpenDoorRequest;

typedef boost::shared_ptr< ::owd_msgs::OpenDoorRequest> OpenDoorRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::OpenDoorRequest const> OpenDoorRequestConstPtr;



template <class ContainerAllocator>
struct OpenDoorResponse_ {
  typedef OpenDoorResponse_<ContainerAllocator> Type;

  OpenDoorResponse_()
  : ok(false)
  , reason()
  , id()
  {
  }

  OpenDoorResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  , id(_alloc)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;


  typedef boost::shared_ptr< ::owd_msgs::OpenDoorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::OpenDoorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct OpenDoorResponse
typedef  ::owd_msgs::OpenDoorResponse_<std::allocator<void> > OpenDoorResponse;

typedef boost::shared_ptr< ::owd_msgs::OpenDoorResponse> OpenDoorResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::OpenDoorResponse const> OpenDoorResponseConstPtr;


struct OpenDoor
{

typedef OpenDoorRequest Request;
typedef OpenDoorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct OpenDoor
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::OpenDoorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::OpenDoorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::OpenDoorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14578c3fe795cea8c11e2ae9859f265c";
  }

  static const char* value(const  ::owd_msgs::OpenDoorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14578c3fe795cea8ULL;
  static const uint64_t static_value2 = 0xc11e2ae9859f265cULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::OpenDoorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/OpenDoorRequest";
  }

  static const char* value(const  ::owd_msgs::OpenDoorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::OpenDoorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/JointTraj traj\n\
geometry_msgs/Pose[] ee_pose\n\
geometry_msgs/Vector3 pull_direction\n\
\n\
================================================================================\n\
MSG: owd_msgs/JointTraj\n\
owd_msgs/Joints[] positions\n\
float32[] blend_radius\n\
uint32 options\n\
string id\n\
\n\
# options should be powers of 2, so that they can be OR'd together\n\
uint32 opt_WaitForStart=1\n\
uint32 opt_CancelOnStall=2\n\
uint32 opt_CancelOnForceInput=4\n\
uint32 opt_CancelOnTactileInput=8\n\
uint32 opt_Synchronize=16\n\
#uint32 opt_          =32  # placeholder for next value\n\
\n\
================================================================================\n\
MSG: owd_msgs/Joints\n\
float64[] j\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::owd_msgs::OpenDoorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::OpenDoorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::OpenDoorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::OpenDoorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "222302c2ef507be891c9d6982f07467f";
  }

  static const char* value(const  ::owd_msgs::OpenDoorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x222302c2ef507be8ULL;
  static const uint64_t static_value2 = 0x91c9d6982f07467fULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::OpenDoorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/OpenDoorResponse";
  }

  static const char* value(const  ::owd_msgs::OpenDoorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::OpenDoorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
string id\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::OpenDoorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::OpenDoorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.traj);
    stream.next(m.ee_pose);
    stream.next(m.pull_direction);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct OpenDoorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::OpenDoorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct OpenDoorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::OpenDoor> {
  static const char* value() 
  {
    return "f4a7c407b022295db65e5d7386039232";
  }

  static const char* value(const owd_msgs::OpenDoor&) { return value(); } 
};

template<>
struct DataType<owd_msgs::OpenDoor> {
  static const char* value() 
  {
    return "owd_msgs/OpenDoor";
  }

  static const char* value(const owd_msgs::OpenDoor&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::OpenDoorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f4a7c407b022295db65e5d7386039232";
  }

  static const char* value(const owd_msgs::OpenDoorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::OpenDoorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/OpenDoor";
  }

  static const char* value(const owd_msgs::OpenDoorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::OpenDoorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f4a7c407b022295db65e5d7386039232";
  }

  static const char* value(const owd_msgs::OpenDoorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::OpenDoorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/OpenDoor";
  }

  static const char* value(const owd_msgs::OpenDoorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_OPENDOOR_H

