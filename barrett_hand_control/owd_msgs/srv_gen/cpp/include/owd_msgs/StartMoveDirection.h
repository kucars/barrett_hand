/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/StartMoveDirection.srv */
#ifndef OWD_MSGS_SERVICE_STARTMOVEDIRECTION_H
#define OWD_MSGS_SERVICE_STARTMOVEDIRECTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace owd_msgs
{
template <class ContainerAllocator>
struct StartMoveDirectionRequest_ {
  typedef StartMoveDirectionRequest_<ContainerAllocator> Type;

  StartMoveDirectionRequest_()
  : direction_x(0.0)
  , direction_y(0.0)
  , direction_z(0.0)
  , distance(0.0)
  , velocity(0.0)
  , compliance(false)
  {
  }

  StartMoveDirectionRequest_(const ContainerAllocator& _alloc)
  : direction_x(0.0)
  , direction_y(0.0)
  , direction_z(0.0)
  , distance(0.0)
  , velocity(0.0)
  , compliance(false)
  {
  }

  typedef float _direction_x_type;
  float direction_x;

  typedef float _direction_y_type;
  float direction_y;

  typedef float _direction_z_type;
  float direction_z;

  typedef float _distance_type;
  float distance;

  typedef float _velocity_type;
  float velocity;

  typedef uint8_t _compliance_type;
  uint8_t compliance;


  typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartMoveDirectionRequest
typedef  ::owd_msgs::StartMoveDirectionRequest_<std::allocator<void> > StartMoveDirectionRequest;

typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionRequest> StartMoveDirectionRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionRequest const> StartMoveDirectionRequestConstPtr;



template <class ContainerAllocator>
struct StartMoveDirectionResponse_ {
  typedef StartMoveDirectionResponse_<ContainerAllocator> Type;

  StartMoveDirectionResponse_()
  : ok(false)
  , reason()
  , id(0)
  {
  }

  StartMoveDirectionResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  , id(0)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;

  typedef uint32_t _id_type;
  uint32_t id;


  typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartMoveDirectionResponse
typedef  ::owd_msgs::StartMoveDirectionResponse_<std::allocator<void> > StartMoveDirectionResponse;

typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionResponse> StartMoveDirectionResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::StartMoveDirectionResponse const> StartMoveDirectionResponseConstPtr;


struct StartMoveDirection
{

typedef StartMoveDirectionRequest Request;
typedef StartMoveDirectionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StartMoveDirection
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff8356aeaeea957f0171c4a52e0adabe";
  }

  static const char* value(const  ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xff8356aeaeea957fULL;
  static const uint64_t static_value2 = 0x0171c4a52e0adabeULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartMoveDirectionRequest";
  }

  static const char* value(const  ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 direction_x\n\
float32 direction_y\n\
float32 direction_z\n\
float32 distance\n\
float32 velocity\n\
bool compliance\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ad2e2c70d0557970f2c1628f5539a6dd";
  }

  static const char* value(const  ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xad2e2c70d0557970ULL;
  static const uint64_t static_value2 = 0xf2c1628f5539a6ddULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartMoveDirectionResponse";
  }

  static const char* value(const  ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
uint32 id\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.direction_x);
    stream.next(m.direction_y);
    stream.next(m.direction_z);
    stream.next(m.distance);
    stream.next(m.velocity);
    stream.next(m.compliance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartMoveDirectionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartMoveDirectionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::StartMoveDirection> {
  static const char* value() 
  {
    return "592d0394dec93f8d4a007e711a4711de";
  }

  static const char* value(const owd_msgs::StartMoveDirection&) { return value(); } 
};

template<>
struct DataType<owd_msgs::StartMoveDirection> {
  static const char* value() 
  {
    return "owd_msgs/StartMoveDirection";
  }

  static const char* value(const owd_msgs::StartMoveDirection&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "592d0394dec93f8d4a007e711a4711de";
  }

  static const char* value(const owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartMoveDirection";
  }

  static const char* value(const owd_msgs::StartMoveDirectionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "592d0394dec93f8d4a007e711a4711de";
  }

  static const char* value(const owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartMoveDirection";
  }

  static const char* value(const owd_msgs::StartMoveDirectionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_STARTMOVEDIRECTION_H

