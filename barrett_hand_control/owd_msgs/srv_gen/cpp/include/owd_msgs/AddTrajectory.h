/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/AddTrajectory.srv */
#ifndef OWD_MSGS_SERVICE_ADDTRAJECTORY_H
#define OWD_MSGS_SERVICE_ADDTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "owd_msgs/JointTraj.h"



namespace owd_msgs
{
template <class ContainerAllocator>
struct AddTrajectoryRequest_ {
  typedef AddTrajectoryRequest_<ContainerAllocator> Type;

  AddTrajectoryRequest_()
  : traj()
  {
  }

  AddTrajectoryRequest_(const ContainerAllocator& _alloc)
  : traj(_alloc)
  {
  }

  typedef  ::owd_msgs::JointTraj_<ContainerAllocator>  _traj_type;
   ::owd_msgs::JointTraj_<ContainerAllocator>  traj;


  typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddTrajectoryRequest
typedef  ::owd_msgs::AddTrajectoryRequest_<std::allocator<void> > AddTrajectoryRequest;

typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryRequest> AddTrajectoryRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryRequest const> AddTrajectoryRequestConstPtr;



template <class ContainerAllocator>
struct AddTrajectoryResponse_ {
  typedef AddTrajectoryResponse_<ContainerAllocator> Type;

  AddTrajectoryResponse_()
  : ok(false)
  , reason()
  , id()
  , time_added()
  {
  }

  AddTrajectoryResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  , id(_alloc)
  , time_added()
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  typedef ros::Time _time_added_type;
  ros::Time time_added;


  typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddTrajectoryResponse
typedef  ::owd_msgs::AddTrajectoryResponse_<std::allocator<void> > AddTrajectoryResponse;

typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryResponse> AddTrajectoryResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::AddTrajectoryResponse const> AddTrajectoryResponseConstPtr;


struct AddTrajectory
{

typedef AddTrajectoryRequest Request;
typedef AddTrajectoryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddTrajectory
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2770e791b13a93fc5f14832ccfc5b4b6";
  }

  static const char* value(const  ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2770e791b13a93fcULL;
  static const uint64_t static_value2 = 0x5f14832ccfc5b4b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTrajectoryRequest";
  }

  static const char* value(const  ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/JointTraj traj\n\
\n\
================================================================================\n\
MSG: owd_msgs/JointTraj\n\
owd_msgs/Joints[] positions\n\
float32[] blend_radius\n\
uint32 options\n\
string id\n\
\n\
# options should be powers of 2, so that they can be OR'd together\n\
uint32 opt_WaitForStart=1\n\
uint32 opt_CancelOnStall=2\n\
uint32 opt_CancelOnForceInput=4\n\
uint32 opt_CancelOnTactileInput=8\n\
uint32 opt_Synchronize=16\n\
#uint32 opt_          =32  # placeholder for next value\n\
\n\
================================================================================\n\
MSG: owd_msgs/Joints\n\
float64[] j\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0bcfcf5f729a5a56a2534bdc22c2abd8";
  }

  static const char* value(const  ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0bcfcf5f729a5a56ULL;
  static const uint64_t static_value2 = 0xa2534bdc22c2abd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTrajectoryResponse";
  }

  static const char* value(const  ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
string id\n\
time time_added\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::AddTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.traj);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTrajectoryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::AddTrajectoryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
    stream.next(m.id);
    stream.next(m.time_added);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTrajectoryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::AddTrajectory> {
  static const char* value() 
  {
    return "b0fb00f22f7cc2db3b94dfce7a138eaa";
  }

  static const char* value(const owd_msgs::AddTrajectory&) { return value(); } 
};

template<>
struct DataType<owd_msgs::AddTrajectory> {
  static const char* value() 
  {
    return "owd_msgs/AddTrajectory";
  }

  static const char* value(const owd_msgs::AddTrajectory&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::AddTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0fb00f22f7cc2db3b94dfce7a138eaa";
  }

  static const char* value(const owd_msgs::AddTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::AddTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTrajectory";
  }

  static const char* value(const owd_msgs::AddTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::AddTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0fb00f22f7cc2db3b94dfce7a138eaa";
  }

  static const char* value(const owd_msgs::AddTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::AddTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTrajectory";
  }

  static const char* value(const owd_msgs::AddTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_ADDTRAJECTORY_H

