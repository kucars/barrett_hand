/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/MoveHand.srv */
#ifndef OWD_MSGS_SERVICE_MOVEHAND_H
#define OWD_MSGS_SERVICE_MOVEHAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace owd_msgs
{
template <class ContainerAllocator>
struct MoveHandRequest_ {
  typedef MoveHandRequest_<ContainerAllocator> Type;

  MoveHandRequest_()
  : movetype(0)
  , positions()
  {
  }

  MoveHandRequest_(const ContainerAllocator& _alloc)
  : movetype(0)
  , positions(_alloc)
  {
  }

  typedef uint8_t _movetype_type;
  uint8_t movetype;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  positions;

  enum { movetype_position = 1 };
  enum { movetype_velocity = 2 };

  typedef boost::shared_ptr< ::owd_msgs::MoveHandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::MoveHandRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveHandRequest
typedef  ::owd_msgs::MoveHandRequest_<std::allocator<void> > MoveHandRequest;

typedef boost::shared_ptr< ::owd_msgs::MoveHandRequest> MoveHandRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::MoveHandRequest const> MoveHandRequestConstPtr;



template <class ContainerAllocator>
struct MoveHandResponse_ {
  typedef MoveHandResponse_<ContainerAllocator> Type;

  MoveHandResponse_()
  : ok(false)
  , reason()
  {
  }

  MoveHandResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;


  typedef boost::shared_ptr< ::owd_msgs::MoveHandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::MoveHandResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveHandResponse
typedef  ::owd_msgs::MoveHandResponse_<std::allocator<void> > MoveHandResponse;

typedef boost::shared_ptr< ::owd_msgs::MoveHandResponse> MoveHandResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::MoveHandResponse const> MoveHandResponseConstPtr;


struct MoveHand
{

typedef MoveHandRequest Request;
typedef MoveHandResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveHand
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::MoveHandRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::MoveHandRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::MoveHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b2b386b029c79c3cdf283445ddd7052";
  }

  static const char* value(const  ::owd_msgs::MoveHandRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8b2b386b029c79c3ULL;
  static const uint64_t static_value2 = 0xcdf283445ddd7052ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::MoveHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/MoveHandRequest";
  }

  static const char* value(const  ::owd_msgs::MoveHandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::MoveHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 movetype\n\
float64[] positions\n\
uint8 movetype_position=1\n\
uint8 movetype_velocity=2\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::MoveHandRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::MoveHandResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::MoveHandResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::MoveHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4679398f882e7cbdea165980d3ec2888";
  }

  static const char* value(const  ::owd_msgs::MoveHandResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4679398f882e7cbdULL;
  static const uint64_t static_value2 = 0xea165980d3ec2888ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::MoveHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/MoveHandResponse";
  }

  static const char* value(const  ::owd_msgs::MoveHandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::MoveHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::MoveHandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::MoveHandRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.movetype);
    stream.next(m.positions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveHandRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::MoveHandResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveHandResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::MoveHand> {
  static const char* value() 
  {
    return "f6025280010064fd2f0d4ea3199d410b";
  }

  static const char* value(const owd_msgs::MoveHand&) { return value(); } 
};

template<>
struct DataType<owd_msgs::MoveHand> {
  static const char* value() 
  {
    return "owd_msgs/MoveHand";
  }

  static const char* value(const owd_msgs::MoveHand&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::MoveHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f6025280010064fd2f0d4ea3199d410b";
  }

  static const char* value(const owd_msgs::MoveHandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::MoveHandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/MoveHand";
  }

  static const char* value(const owd_msgs::MoveHandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::MoveHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f6025280010064fd2f0d4ea3199d410b";
  }

  static const char* value(const owd_msgs::MoveHandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::MoveHandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/MoveHand";
  }

  static const char* value(const owd_msgs::MoveHandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_MOVEHAND_H

