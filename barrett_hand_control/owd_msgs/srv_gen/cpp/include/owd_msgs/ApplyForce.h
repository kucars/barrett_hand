/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/ApplyForce.srv */
#ifndef OWD_MSGS_SERVICE_APPLYFORCE_H
#define OWD_MSGS_SERVICE_APPLYFORCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace owd_msgs
{
template <class ContainerAllocator>
struct ApplyForceRequest_ {
  typedef ApplyForceRequest_<ContainerAllocator> Type;

  ApplyForceRequest_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , f(0.0)
  , vibrate_hand_x(0.0)
  , vibrate_hand_y(0.0)
  , vibrate_hand_z(0.0)
  , vibrate_amplitude_m(0.0)
  , vibrate_frequency_hz(0.0)
  , rotational_compliance(false)
  {
  }

  ApplyForceRequest_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , f(0.0)
  , vibrate_hand_x(0.0)
  , vibrate_hand_y(0.0)
  , vibrate_hand_z(0.0)
  , vibrate_amplitude_m(0.0)
  , vibrate_frequency_hz(0.0)
  , rotational_compliance(false)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _f_type;
  double f;

  typedef double _vibrate_hand_x_type;
  double vibrate_hand_x;

  typedef double _vibrate_hand_y_type;
  double vibrate_hand_y;

  typedef double _vibrate_hand_z_type;
  double vibrate_hand_z;

  typedef double _vibrate_amplitude_m_type;
  double vibrate_amplitude_m;

  typedef double _vibrate_frequency_hz_type;
  double vibrate_frequency_hz;

  typedef uint8_t _rotational_compliance_type;
  uint8_t rotational_compliance;


  typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ApplyForceRequest
typedef  ::owd_msgs::ApplyForceRequest_<std::allocator<void> > ApplyForceRequest;

typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest> ApplyForceRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::ApplyForceRequest const> ApplyForceRequestConstPtr;



template <class ContainerAllocator>
struct ApplyForceResponse_ {
  typedef ApplyForceResponse_<ContainerAllocator> Type;

  ApplyForceResponse_()
  : ok(false)
  , reason()
  , id()
  {
  }

  ApplyForceResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  , id(_alloc)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;


  typedef boost::shared_ptr< ::owd_msgs::ApplyForceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::ApplyForceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ApplyForceResponse
typedef  ::owd_msgs::ApplyForceResponse_<std::allocator<void> > ApplyForceResponse;

typedef boost::shared_ptr< ::owd_msgs::ApplyForceResponse> ApplyForceResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::ApplyForceResponse const> ApplyForceResponseConstPtr;


struct ApplyForce
{

typedef ApplyForceRequest Request;
typedef ApplyForceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ApplyForce
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::ApplyForceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "193fc0cf730e401d791e0bcb6994ed76";
  }

  static const char* value(const  ::owd_msgs::ApplyForceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x193fc0cf730e401dULL;
  static const uint64_t static_value2 = 0x791e0bcb6994ed76ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/ApplyForceRequest";
  }

  static const char* value(const  ::owd_msgs::ApplyForceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 f\n\
float64 vibrate_hand_x\n\
float64 vibrate_hand_y\n\
float64 vibrate_hand_z\n\
float64 vibrate_amplitude_m\n\
float64 vibrate_frequency_hz\n\
bool rotational_compliance\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::ApplyForceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::ApplyForceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::ApplyForceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::ApplyForceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "222302c2ef507be891c9d6982f07467f";
  }

  static const char* value(const  ::owd_msgs::ApplyForceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x222302c2ef507be8ULL;
  static const uint64_t static_value2 = 0x91c9d6982f07467fULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::ApplyForceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/ApplyForceResponse";
  }

  static const char* value(const  ::owd_msgs::ApplyForceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::ApplyForceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
string id\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::ApplyForceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::ApplyForceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.f);
    stream.next(m.vibrate_hand_x);
    stream.next(m.vibrate_hand_y);
    stream.next(m.vibrate_hand_z);
    stream.next(m.vibrate_amplitude_m);
    stream.next(m.vibrate_frequency_hz);
    stream.next(m.rotational_compliance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ApplyForceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::ApplyForceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ApplyForceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::ApplyForce> {
  static const char* value() 
  {
    return "b4fa68e6191cc8f05f97d6ee661a3864";
  }

  static const char* value(const owd_msgs::ApplyForce&) { return value(); } 
};

template<>
struct DataType<owd_msgs::ApplyForce> {
  static const char* value() 
  {
    return "owd_msgs/ApplyForce";
  }

  static const char* value(const owd_msgs::ApplyForce&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::ApplyForceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b4fa68e6191cc8f05f97d6ee661a3864";
  }

  static const char* value(const owd_msgs::ApplyForceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::ApplyForceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/ApplyForce";
  }

  static const char* value(const owd_msgs::ApplyForceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::ApplyForceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b4fa68e6191cc8f05f97d6ee661a3864";
  }

  static const char* value(const owd_msgs::ApplyForceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::ApplyForceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/ApplyForce";
  }

  static const char* value(const owd_msgs::ApplyForceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_APPLYFORCE_H

