/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/SetController.srv */
#ifndef OWD_MSGS_SERVICE_SETCONTROLLER_H
#define OWD_MSGS_SERVICE_SETCONTROLLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace owd_msgs
{
template <class ContainerAllocator>
struct SetControllerRequest_ {
  typedef SetControllerRequest_<ContainerAllocator> Type;

  SetControllerRequest_()
  : name()
  {
  }

  SetControllerRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;


  typedef boost::shared_ptr< ::owd_msgs::SetControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::SetControllerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetControllerRequest
typedef  ::owd_msgs::SetControllerRequest_<std::allocator<void> > SetControllerRequest;

typedef boost::shared_ptr< ::owd_msgs::SetControllerRequest> SetControllerRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::SetControllerRequest const> SetControllerRequestConstPtr;



template <class ContainerAllocator>
struct SetControllerResponse_ {
  typedef SetControllerResponse_<ContainerAllocator> Type;

  SetControllerResponse_()
  : ok(false)
  , reason()
  {
  }

  SetControllerResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;


  typedef boost::shared_ptr< ::owd_msgs::SetControllerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::SetControllerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetControllerResponse
typedef  ::owd_msgs::SetControllerResponse_<std::allocator<void> > SetControllerResponse;

typedef boost::shared_ptr< ::owd_msgs::SetControllerResponse> SetControllerResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::SetControllerResponse const> SetControllerResponseConstPtr;


struct SetController
{

typedef SetControllerRequest Request;
typedef SetControllerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetController
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::SetControllerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::SetControllerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::SetControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1f3d28f1b044c871e6eff2e9fc3c667";
  }

  static const char* value(const  ::owd_msgs::SetControllerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc1f3d28f1b044c87ULL;
  static const uint64_t static_value2 = 0x1e6eff2e9fc3c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::SetControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/SetControllerRequest";
  }

  static const char* value(const  ::owd_msgs::SetControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::SetControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::SetControllerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::SetControllerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::SetControllerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::SetControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4679398f882e7cbdea165980d3ec2888";
  }

  static const char* value(const  ::owd_msgs::SetControllerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4679398f882e7cbdULL;
  static const uint64_t static_value2 = 0xea165980d3ec2888ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::SetControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/SetControllerResponse";
  }

  static const char* value(const  ::owd_msgs::SetControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::SetControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::SetControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::SetControllerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetControllerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::SetControllerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetControllerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::SetController> {
  static const char* value() 
  {
    return "1e590c5944817d436cfbcaa99fe1b98a";
  }

  static const char* value(const owd_msgs::SetController&) { return value(); } 
};

template<>
struct DataType<owd_msgs::SetController> {
  static const char* value() 
  {
    return "owd_msgs/SetController";
  }

  static const char* value(const owd_msgs::SetController&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::SetControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e590c5944817d436cfbcaa99fe1b98a";
  }

  static const char* value(const owd_msgs::SetControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::SetControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/SetController";
  }

  static const char* value(const owd_msgs::SetControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::SetControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e590c5944817d436cfbcaa99fe1b98a";
  }

  static const char* value(const owd_msgs::SetControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::SetControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/SetController";
  }

  static const char* value(const owd_msgs::SetControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_SETCONTROLLER_H

