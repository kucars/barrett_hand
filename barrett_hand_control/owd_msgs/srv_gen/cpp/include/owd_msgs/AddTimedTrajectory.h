/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/AddTimedTrajectory.srv */
#ifndef OWD_MSGS_SERVICE_ADDTIMEDTRAJECTORY_H
#define OWD_MSGS_SERVICE_ADDTIMEDTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace owd_msgs
{
template <class ContainerAllocator>
struct AddTimedTrajectoryRequest_ {
  typedef AddTimedTrajectoryRequest_<ContainerAllocator> Type;

  AddTimedTrajectoryRequest_()
  : SerializedTrajectory()
  , options(0)
  , id()
  {
  }

  AddTimedTrajectoryRequest_(const ContainerAllocator& _alloc)
  : SerializedTrajectory(_alloc)
  , options(0)
  , id(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _SerializedTrajectory_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SerializedTrajectory;

  typedef uint32_t _options_type;
  uint32_t options;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;


  typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddTimedTrajectoryRequest
typedef  ::owd_msgs::AddTimedTrajectoryRequest_<std::allocator<void> > AddTimedTrajectoryRequest;

typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryRequest> AddTimedTrajectoryRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryRequest const> AddTimedTrajectoryRequestConstPtr;



template <class ContainerAllocator>
struct AddTimedTrajectoryResponse_ {
  typedef AddTimedTrajectoryResponse_<ContainerAllocator> Type;

  AddTimedTrajectoryResponse_()
  : ok(false)
  , reason()
  , id()
  , time_added()
  {
  }

  AddTimedTrajectoryResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  , id(_alloc)
  , time_added()
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  typedef ros::Time _time_added_type;
  ros::Time time_added;


  typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddTimedTrajectoryResponse
typedef  ::owd_msgs::AddTimedTrajectoryResponse_<std::allocator<void> > AddTimedTrajectoryResponse;

typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryResponse> AddTimedTrajectoryResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::AddTimedTrajectoryResponse const> AddTimedTrajectoryResponseConstPtr;


struct AddTimedTrajectory
{

typedef AddTimedTrajectoryRequest Request;
typedef AddTimedTrajectoryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddTimedTrajectory
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd784ba2cd170a9818a5ebbfa7d0f8bd";
  }

  static const char* value(const  ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdd784ba2cd170a98ULL;
  static const uint64_t static_value2 = 0x18a5ebbfa7d0f8bdULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTimedTrajectoryRequest";
  }

  static const char* value(const  ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
string SerializedTrajectory\n\
\n\
\n\
uint32 options\n\
\n\
\n\
\n\
string id\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0bcfcf5f729a5a56a2534bdc22c2abd8";
  }

  static const char* value(const  ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0bcfcf5f729a5a56ULL;
  static const uint64_t static_value2 = 0xa2534bdc22c2abd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTimedTrajectoryResponse";
  }

  static const char* value(const  ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
string id\n\
time time_added\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.SerializedTrajectory);
    stream.next(m.options);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTimedTrajectoryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
    stream.next(m.id);
    stream.next(m.time_added);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTimedTrajectoryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::AddTimedTrajectory> {
  static const char* value() 
  {
    return "cef48710cbca1959e13f1a927d0adf9a";
  }

  static const char* value(const owd_msgs::AddTimedTrajectory&) { return value(); } 
};

template<>
struct DataType<owd_msgs::AddTimedTrajectory> {
  static const char* value() 
  {
    return "owd_msgs/AddTimedTrajectory";
  }

  static const char* value(const owd_msgs::AddTimedTrajectory&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cef48710cbca1959e13f1a927d0adf9a";
  }

  static const char* value(const owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTimedTrajectory";
  }

  static const char* value(const owd_msgs::AddTimedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cef48710cbca1959e13f1a927d0adf9a";
  }

  static const char* value(const owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddTimedTrajectory";
  }

  static const char* value(const owd_msgs::AddTimedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_ADDTIMEDTRAJECTORY_H

