/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/StartTeleop.srv */
#ifndef OWD_MSGS_SERVICE_STARTTELEOP_H
#define OWD_MSGS_SERVICE_STARTTELEOP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace owd_msgs
{
template <class ContainerAllocator>
struct StartTeleopRequest_ {
  typedef StartTeleopRequest_<ContainerAllocator> Type;

  StartTeleopRequest_()
  : input_topic()
  {
  }

  StartTeleopRequest_(const ContainerAllocator& _alloc)
  : input_topic(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _input_topic_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  input_topic;


  typedef boost::shared_ptr< ::owd_msgs::StartTeleopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::StartTeleopRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartTeleopRequest
typedef  ::owd_msgs::StartTeleopRequest_<std::allocator<void> > StartTeleopRequest;

typedef boost::shared_ptr< ::owd_msgs::StartTeleopRequest> StartTeleopRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::StartTeleopRequest const> StartTeleopRequestConstPtr;



template <class ContainerAllocator>
struct StartTeleopResponse_ {
  typedef StartTeleopResponse_<ContainerAllocator> Type;

  StartTeleopResponse_()
  : ok(false)
  , reason()
  , id(0)
  {
  }

  StartTeleopResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  , id(0)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;

  typedef uint32_t _id_type;
  uint32_t id;


  typedef boost::shared_ptr< ::owd_msgs::StartTeleopResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::StartTeleopResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartTeleopResponse
typedef  ::owd_msgs::StartTeleopResponse_<std::allocator<void> > StartTeleopResponse;

typedef boost::shared_ptr< ::owd_msgs::StartTeleopResponse> StartTeleopResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::StartTeleopResponse const> StartTeleopResponseConstPtr;


struct StartTeleop
{

typedef StartTeleopRequest Request;
typedef StartTeleopResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StartTeleop
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartTeleopRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartTeleopRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::StartTeleopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9b7162195ba18d72937d75c401c685ce";
  }

  static const char* value(const  ::owd_msgs::StartTeleopRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9b7162195ba18d72ULL;
  static const uint64_t static_value2 = 0x937d75c401c685ceULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::StartTeleopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartTeleopRequest";
  }

  static const char* value(const  ::owd_msgs::StartTeleopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::StartTeleopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
string input_topic\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::StartTeleopRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartTeleopResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::StartTeleopResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::StartTeleopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ad2e2c70d0557970f2c1628f5539a6dd";
  }

  static const char* value(const  ::owd_msgs::StartTeleopResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xad2e2c70d0557970ULL;
  static const uint64_t static_value2 = 0xf2c1628f5539a6ddULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::StartTeleopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartTeleopResponse";
  }

  static const char* value(const  ::owd_msgs::StartTeleopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::StartTeleopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
uint32 id\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::StartTeleopResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::StartTeleopRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.input_topic);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartTeleopRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::StartTeleopResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartTeleopResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::StartTeleop> {
  static const char* value() 
  {
    return "e3c64a01f46498f5454eb9dea3b978d3";
  }

  static const char* value(const owd_msgs::StartTeleop&) { return value(); } 
};

template<>
struct DataType<owd_msgs::StartTeleop> {
  static const char* value() 
  {
    return "owd_msgs/StartTeleop";
  }

  static const char* value(const owd_msgs::StartTeleop&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::StartTeleopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3c64a01f46498f5454eb9dea3b978d3";
  }

  static const char* value(const owd_msgs::StartTeleopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::StartTeleopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartTeleop";
  }

  static const char* value(const owd_msgs::StartTeleopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::StartTeleopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3c64a01f46498f5454eb9dea3b978d3";
  }

  static const char* value(const owd_msgs::StartTeleopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::StartTeleopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/StartTeleop";
  }

  static const char* value(const owd_msgs::StartTeleopResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_STARTTELEOP_H

