/* Auto-generated by genmsg_cpp for file /home/kuri/catkin_ws/src/owd_msgs/srv/AddWSTraj.srv */
#ifndef OWD_MSGS_SERVICE_ADDWSTRAJ_H
#define OWD_MSGS_SERVICE_ADDWSTRAJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Wrench.h"



namespace owd_msgs
{
template <class ContainerAllocator>
struct AddWSTrajRequest_ {
  typedef AddWSTrajRequest_<ContainerAllocator> Type;

  AddWSTrajRequest_()
  : endpoint_change()
  , starting_config()
  , ending_config()
  , wrench()
  , ApplyForce(false)
  , af_x(0.0)
  , af_y(0.0)
  , af_z(0.0)
  , af_f(0.0)
  , af_rotational_compliance(false)
  , Vibrate(false)
  , vibrate_hand_x(0.0)
  , vibrate_hand_y(0.0)
  , vibrate_hand_z(0.0)
  , vibrate_amplitude_m(0.0)
  , vibrate_frequency_hz(0.0)
  , max_linear_velocity(0.0)
  , max_angular_velocity(0.0)
  , min_accel_time(0.0)
  , options(0)
  {
  }

  AddWSTrajRequest_(const ContainerAllocator& _alloc)
  : endpoint_change(_alloc)
  , starting_config(_alloc)
  , ending_config(_alloc)
  , wrench(_alloc)
  , ApplyForce(false)
  , af_x(0.0)
  , af_y(0.0)
  , af_z(0.0)
  , af_f(0.0)
  , af_rotational_compliance(false)
  , Vibrate(false)
  , vibrate_hand_x(0.0)
  , vibrate_hand_y(0.0)
  , vibrate_hand_z(0.0)
  , vibrate_amplitude_m(0.0)
  , vibrate_frequency_hz(0.0)
  , max_linear_velocity(0.0)
  , max_angular_velocity(0.0)
  , min_accel_time(0.0)
  , options(0)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _endpoint_change_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  endpoint_change;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _starting_config_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  starting_config;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ending_config_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  ending_config;

  typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
   ::geometry_msgs::Wrench_<ContainerAllocator>  wrench;

  typedef uint8_t _ApplyForce_type;
  uint8_t ApplyForce;

  typedef double _af_x_type;
  double af_x;

  typedef double _af_y_type;
  double af_y;

  typedef double _af_z_type;
  double af_z;

  typedef double _af_f_type;
  double af_f;

  typedef uint8_t _af_rotational_compliance_type;
  uint8_t af_rotational_compliance;

  typedef uint8_t _Vibrate_type;
  uint8_t Vibrate;

  typedef double _vibrate_hand_x_type;
  double vibrate_hand_x;

  typedef double _vibrate_hand_y_type;
  double vibrate_hand_y;

  typedef double _vibrate_hand_z_type;
  double vibrate_hand_z;

  typedef double _vibrate_amplitude_m_type;
  double vibrate_amplitude_m;

  typedef double _vibrate_frequency_hz_type;
  double vibrate_frequency_hz;

  typedef float _max_linear_velocity_type;
  float max_linear_velocity;

  typedef float _max_angular_velocity_type;
  float max_angular_velocity;

  typedef float _min_accel_time_type;
  float min_accel_time;

  typedef uint32_t _options_type;
  uint32_t options;


  typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddWSTrajRequest
typedef  ::owd_msgs::AddWSTrajRequest_<std::allocator<void> > AddWSTrajRequest;

typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest> AddWSTrajRequestPtr;
typedef boost::shared_ptr< ::owd_msgs::AddWSTrajRequest const> AddWSTrajRequestConstPtr;



template <class ContainerAllocator>
struct AddWSTrajResponse_ {
  typedef AddWSTrajResponse_<ContainerAllocator> Type;

  AddWSTrajResponse_()
  : id(0)
  , ok(false)
  , reason()
  {
  }

  AddWSTrajResponse_(const ContainerAllocator& _alloc)
  : id(0)
  , ok(false)
  , reason(_alloc)
  {
  }

  typedef uint32_t _id_type;
  uint32_t id;

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;


  typedef boost::shared_ptr< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddWSTrajResponse
typedef  ::owd_msgs::AddWSTrajResponse_<std::allocator<void> > AddWSTrajResponse;

typedef boost::shared_ptr< ::owd_msgs::AddWSTrajResponse> AddWSTrajResponsePtr;
typedef boost::shared_ptr< ::owd_msgs::AddWSTrajResponse const> AddWSTrajResponseConstPtr;


struct AddWSTraj
{

typedef AddWSTrajRequest Request;
typedef AddWSTrajResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddWSTraj
} // namespace owd_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5b65f68e91300a226a2666a5857ded18";
  }

  static const char* value(const  ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5b65f68e91300a22ULL;
  static const uint64_t static_value2 = 0x6a2666a5857ded18ULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddWSTrajRequest";
  }

  static const char* value(const  ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/Pose endpoint_change\n\
\n\
\n\
\n\
\n\
float64[] starting_config\n\
float64[] ending_config\n\
\n\
\n\
\n\
\n\
geometry_msgs/Wrench wrench\n\
\n\
\n\
\n\
bool ApplyForce\n\
float64 af_x\n\
float64 af_y\n\
float64 af_z\n\
float64 af_f\n\
bool af_rotational_compliance\n\
\n\
bool Vibrate\n\
float64 vibrate_hand_x\n\
float64 vibrate_hand_y\n\
float64 vibrate_hand_z\n\
float64 vibrate_amplitude_m\n\
float64 vibrate_frequency_hz\n\
\n\
\n\
\n\
float32 max_linear_velocity\n\
float32 max_angular_velocity\n\
float32 min_accel_time\n\
\n\
\n\
uint32 options\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, separated into\n\
# its linear and angular parts.\n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1941fb0b876c4db55b3c7a641b6e9d0a";
  }

  static const char* value(const  ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1941fb0b876c4db5ULL;
  static const uint64_t static_value2 = 0x5b3c7a641b6e9d0aULL;
};

template<class ContainerAllocator>
struct DataType< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddWSTrajResponse";
  }

  static const char* value(const  ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 id\n\
bool ok\n\
string reason\n\
\n\
\n\
";
  }

  static const char* value(const  ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::AddWSTrajRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.endpoint_change);
    stream.next(m.starting_config);
    stream.next(m.ending_config);
    stream.next(m.wrench);
    stream.next(m.ApplyForce);
    stream.next(m.af_x);
    stream.next(m.af_y);
    stream.next(m.af_z);
    stream.next(m.af_f);
    stream.next(m.af_rotational_compliance);
    stream.next(m.Vibrate);
    stream.next(m.vibrate_hand_x);
    stream.next(m.vibrate_hand_y);
    stream.next(m.vibrate_hand_z);
    stream.next(m.vibrate_amplitude_m);
    stream.next(m.vibrate_frequency_hz);
    stream.next(m.max_linear_velocity);
    stream.next(m.max_angular_velocity);
    stream.next(m.min_accel_time);
    stream.next(m.options);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddWSTrajRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owd_msgs::AddWSTrajResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.ok);
    stream.next(m.reason);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddWSTrajResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<owd_msgs::AddWSTraj> {
  static const char* value() 
  {
    return "5164fe8c219e48a655b925201ed3c564";
  }

  static const char* value(const owd_msgs::AddWSTraj&) { return value(); } 
};

template<>
struct DataType<owd_msgs::AddWSTraj> {
  static const char* value() 
  {
    return "owd_msgs/AddWSTraj";
  }

  static const char* value(const owd_msgs::AddWSTraj&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::AddWSTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5164fe8c219e48a655b925201ed3c564";
  }

  static const char* value(const owd_msgs::AddWSTrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::AddWSTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddWSTraj";
  }

  static const char* value(const owd_msgs::AddWSTrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<owd_msgs::AddWSTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5164fe8c219e48a655b925201ed3c564";
  }

  static const char* value(const owd_msgs::AddWSTrajResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<owd_msgs::AddWSTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owd_msgs/AddWSTraj";
  }

  static const char* value(const owd_msgs::AddWSTrajResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OWD_MSGS_SERVICE_ADDWSTRAJ_H

